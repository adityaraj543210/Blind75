1. Recursive Solution

class Solution {
public:

    bool help(vector<int> &nums, int index){
        if(index == nums.size()-1) return true;

        for(int step = 1; step<=nums[index]; step++){
            if(help(nums, index+step)) return true;
        }
        return false;
    }
    bool canJump(vector<int>& nums) {
        return help(nums, 0);
    }
};


2. Memoization

class Solution {
public:

    bool help(vector<int> &nums, int index, vector<int> &dp){
        if(index == nums.size()-1) return true;
        if(dp[index] != -1) return dp[index];
        for(int step = 1; step<=nums[index]; step++){
            if(help(nums, index+step, dp)) return true;
        }
        return dp[index] = false;
    }
    bool canJump(vector<int>& nums) {
        vector<int> dp(nums.size(), -1);
        return help(nums, 0, dp);
    }
};

3. Tabulaiton

class Solution {
public:

    bool canJump(vector<int>& nums) {
        vector<int> dp(nums.size(), 0);
        dp[nums.size()-1] = true;
        for(int i=nums.size()-2; i>=0; i--){
            for(int step = 0; step<=nums[i] && step+i<nums.size(); step++){
                if(dp[i+step]) {
                    dp[i]=1;
                    break;
                }
            }
        }
        return dp[0];
    }
};


4. Greedy Solution

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxi = 0;

        for(int i=0; i<nums.size(); i++){
            maxi = max(maxi, i+nums[i]); 
            if(maxi >= nums.size()-1) return true; 
            if(maxi==i) return false;            
        }
        return true;
    }
};

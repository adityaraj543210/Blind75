1. Recursive Solution

class Solution {
public:

    int help(vector<int> &arr, int index){
        if(index>=arr.size()) return 0;

        //pick
        int pick = arr[index] + help(arr, index+2);

        //skip
        int skip = help(arr, index+1);
        return max(pick, skip);
    }


    int rob(vector<int>& nums) {
        vector<int> arr1;
        vector<int> arr2;
        for(int i=0; i<nums.size(); i++){
            if(i==0) {
                arr1.push_back(nums[i]);
            }
            else if(i==nums.size()-1){
                arr2.push_back(nums[i]);
            }
            else{
                arr1.push_back(nums[i]);
                arr2.push_back(nums[i]);
            }
        }

        //now we have two arrays and solve it like house robber I

        return max(help(arr1, 0), help(arr2, 0));
    }
};


2. Memoization

class Solution {
public:

    int help(vector<int> &arr, int index, vector<int> &dp){
        if(index>=arr.size()) return 0;

        if(dp[index]!=-1) return dp[index];
        //pick
        int pick = arr[index] + help(arr, index+2, dp);

        //skip
        int skip = help(arr, index+1, dp);
        return dp[index] = max(pick, skip);
    }


    int rob(vector<int>& nums) {
        vector<int> arr1;
        vector<int> arr2;
        int n = nums.size();
        for(int i=0; i<nums.size(); i++){
            if(i==0) {
                arr1.push_back(nums[i]);
            }
            else if(i==nums.size()-1){
                arr2.push_back(nums[i]);
            }
            else{
                arr1.push_back(nums[i]);
                arr2.push_back(nums[i]);
            }
        }

        //now we have two arrays and solve it like house robber I
        vector<int> dp(n, -1);
        int ans1 = help(arr1, 0, dp);
        dp = vector<int> (n, -1);
        int ans2 = help(arr2, 0, dp);
        return max(ans1, ans2);
    }
};

3. Tabulation
class Solution {
public:
    int help(vector<int> nums){
        int n = nums.size();
        vector<int> dp(n,0);
        for(int i=0; i<n; i++){
            if(i==0) dp[0] = nums[i];
            else if(i==1) dp[1] = max(dp[i-1], nums[i]);
            else dp[i] = max(dp[i-1], nums[i]+dp[i-2]);
        }
        if(n==0) return 0;
        return dp[n-1];
    }
    int rob(vector<int>& nums) {
        vector<int> arr1;
        vector<int> arr2;
        int n = nums.size();
        for(int i=0; i<nums.size(); i++){
            if(i==0) {
                arr1.push_back(nums[i]);
            }
            else if(i==nums.size()-1){
                arr2.push_back(nums[i]);
            }
            else{
                arr1.push_back(nums[i]);
                arr2.push_back(nums[i]);
            }
        }

        //now we have two arrays and solve it like house robber I
       
        int ans1 = help(arr1);
        
        int ans2 = help(arr2);

        return max(ans1, ans2);
    }
};

5. Space optimization
just use two prev val. instead of storing array




1 Approach 1
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int maxLen = 0;
        pair<int,int> res = {0, 0};
        for(int i=0; i<n; i++){
            //odd length
            int l = i; int r = i;
            while(l>=0 && r<n && s[l]==s[r]){
                if(r-l+1>maxLen){
                    maxLen = r-l+1;
                    res = {l, r};
                }
                r++; l--;
            }

            //even lenght
              l = i, r = i+1;
             while(l>=0 && r<n && s[l]==s[r]){
                if(r-l+1>maxLen){
                    maxLen = r-l+1;
                    res = {l, r};
                }
                r++; l--;
             }
        }
        return s.substr(res.first, res.second-res.first+1);
    }
};


2. 

//Here dp[I][j] stores the maximum length of substring considering I and j as end point.

class Solution {
public:
    string longestPalindrome(string s) {
        string str;
        int res=0;
        string s1=s;
        string s2=s;
        reverse(s2.begin(), s2.end());
        int m=s1.size();
        int n=s2.size();
        int t[m+1][n+1];
        for(int i=0; i<m+1; i++)
            for(int j=0; j<n+1; j++)
            {
                if(i==0 || j==0)
                    t[i][j]=0;
            }
        
        
        for(int i=1; i<m+1; i++)
            for(int j=1; j<n+1; j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    t[i][j]=1+t[i-1][j-1];
                    if(res<t[i][j])
                    {
                        string temp=s.substr(i-t[i][j],t[i][j]);
                        string temp2=temp;
                        reverse(temp2.begin(), temp2.end());
                        if(temp==temp2)
                        {
                        res=t[i][j];
                        str=temp;
                        }
                    }
                }
                else
                    t[i][j]=0;
            }
        return str;
        
        
    }
};

1. Using Map

class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_map<ListNode*, int> mp;
        ListNode* ptr = head;
        while(ptr){
            if(mp[ptr]) return true;
            mp[ptr]++;
            ptr = ptr->next;
        }
        return false;
    }
};

2. Using two pointer

/*
Definition of singly linked list:
struct ListNode
{
    int val;
    ListNode *next;
    ListNode()
    {
        val = 0;
        next = NULL;
    }
    ListNode(int data1)
    {
        val = data1;
        next = NULL;
    }
    ListNode(int data1, ListNode *next1)
    {
        val = data1;
        next = next1;
    }
};
*/

class Solution {
public:
    bool hasCycle(ListNode *head) {
            ListNode* slow = head;
            ListNode* fast = head;
            if(head==NULL) return false;
            while(fast && fast->next){
                slow = slow->next;
                fast = fast->next->next;
                if(slow == fast) return true;
            }
            return false;
    }
};

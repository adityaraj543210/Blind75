//BFS Solution

class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        //making of adj list
        vector<vector<int>> adj(numCourses);
        for(auto edge : prerequisites){
            int v = edge[0];
            int u = edge[1];
            adj[u].push_back(v);
        }
        vector<int> inDegree(numCourses, 0);
        for(int i=0; i<numCourses; i++){
            for(auto node: adj[i]){
                inDegree[node]++;
            }
        }

        //now topo sort

        queue<int> q;
        for(int i=0; i<numCourses; i++){
            if(inDegree[i]==0) q.push(i);
        }
        int count = 0;
        while(!q.empty()){
            int t = q.front();
            q.pop();
            count++;
            for(auto ngbr: adj[t]){
                inDegree[ngbr]--;
                if(inDegree[ngbr]==0) q.push(ngbr);
            }
        }
        return numCourses==count;
    }
};



// DFS Solution

class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        // making of adj list
        vector<vector<int>> adj(numCourses);
        for (auto edge : prerequisites) {
            int v = edge[0];
            int u = edge[1];
            adj[u].push_back(v);
        }
        vector<int> vis(numCourses, 0);
        vector<int> dfsVis(numCourses, 0);
        for (int i = 0; i < numCourses; i++) {
            if (!vis[i]) {
                if (!dfs(adj, vis, dfsVis, i)) {
                    return false;
                }
            }
        }
        return true;
    }

    bool dfs(vector<vector<int>>& adj, vector<int>& vis, vector<int> dfsVis,
             int node) {
        vis[node] = 1;
        dfsVis[node] = 1;
        for (auto ngbr : adj[node]) {
            if (dfsVis[ngbr] == 1)
                return false;
            if (!vis[ngbr])
                if (!dfs(adj, vis, dfsVis, ngbr))
                    return false;
        }
        dfsVis[node] = 0;
        return true;
    }
};


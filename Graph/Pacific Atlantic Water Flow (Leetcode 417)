class Solution {
public:
    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};
    bool isPacific(int r, int c, vector<vector<int>>& heights, int m, int n, vector<vector<int>> &visp) {
        visp[r][c] = 1;
        if (r <= 0 || c <= 0)
            return true;
        for (int i = 0; i < 4; i++) {
            int r_ = r + dx[i];
            int c_ = c + dy[i];
            if (r_ >= 0 && c_ >= 0 && r_ < m && c_ < n &&
                heights[r_][c_] <= heights[r][c]) {
                if (!visp[r_][c_] && isPacific(r_, c_, heights, m, n, visp))
                    return true;
            }
        }
        return false;
    }

    bool isAtlantic(int r, int c, vector<vector<int>>& heights, int m, int n, vector<vector<int>> &visa) {
        visa[r][c] = 1;
        if (r == m - 1 || c == n - 1)
            return true;
        for (int i = 0; i < 4; i++) {
            int r_ = r + dx[i];
            int c_ = c + dy[i];
            if (r_ >= 0 && c_ >= 0 && r_ < m && c_ < n &&
                heights[r_][c_] <= heights[r][c]) {
                if (!visa[r_][c_] && isAtlantic(r_, c_, heights, m, n, visa))
                    return true;
            }
        }
        return false;
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> ans;
        vector<vector<int>> visp;
        vector<vector<int>> visa;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                visp.assign(m, vector<int> (n, 0));
                visa.assign(m, vector<int> (n, 0));
                if (isPacific(i, j, heights, m, n,visp) &&
                    isAtlantic(i, j, heights, m, n, visa)) {
                    ans.push_back({i, j});
                }
            }
        }
        return ans;
    }
};

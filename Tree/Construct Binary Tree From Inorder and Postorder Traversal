/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTreehelp(vector<int> &in, vector<int> &po, int is, int ie, int ps, int pe, map<int,int> &inMap){
        if(ps>pe || is>ie) return NULL;
        int val = po[pe];
        TreeNode* root = new TreeNode(po[pe]);
        int index = inMap[val];
        root->left = buildTreehelp(in,po,is, index-1, ps, ps + index-1-is, inMap);
        root->right = buildTreehelp(in, po, index+1, ie, ps+index-is, ps-is + ie-1, inMap); 
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int  n = inorder.size();
         map<int,int> inMap;
         for(int i=0; i<n; i++){
            inMap[inorder[i]] = i;
         }
         return buildTreehelp(inorder, postorder, 0, n-1, 0, n-1, inMap); //in po is ie ps pe inmap

    }
};

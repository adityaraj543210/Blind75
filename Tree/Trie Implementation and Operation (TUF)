class Node {
   public:
    Node* links[26];
    bool flag = false;

    bool containsKey(char ch){
        return this->links[ch-'a'] != NULL;
    }
};

class Trie{
    public:
    Node* root = new Node();
    Trie(){
      
    }
    void insert(string word) {
           Node* node = root;
           for(char ch:word){
            if(!node->containsKey(ch)){
                node->links[ch-'a'] = new Node();
            }
            node = node->links[ch-'a'];
           }

        node->flag = true;

    }

    bool search(string word) {
        Node* node = root;
        for(char ch:word){
            if(!node->containsKey(ch)){
                return false;
            }
            node = node->links[ch-'a'];
        }
        return node->flag;
    }

    bool startsWith(string prefix) {
        Node* node = root;
        for(char ch:prefix){
            if(!node->containsKey(ch)) return false;
            node = node->links[ch-'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

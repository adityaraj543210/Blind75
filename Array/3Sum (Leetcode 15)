1.
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        set<vector<int>> st;
        for(int i=0; i<=n-3;i++){
            for(int j= i+1; j<=n-2; j++){
                int target = -(nums[i]+nums[j]);
                int l = j+1, h = n-1;
                while(l<=h){
                    int mid = l+(h-l)/2;
                    if(nums[mid]==target) {
                        st.insert({nums[i], nums[j], nums[mid]});
                        break;
                    }
                    else if(nums[mid]>target) h = mid-1;
                    else l = mid+1;
                }
            }
        }
        for(auto it:st) ans.push_back(it);
        return ans;
    }
};


2.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<vector<int>> ans;
        for(int i=0; i<=n-3;  i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int target = -nums[i];
            int l = i+1, h=n-1;
            while(l<h){
                if(nums[l]+nums[h]==target){
                    ans.push_back({nums[i], nums[l], nums[h]});
                    l++,h--;
                    while(l<n && nums[l]==nums[l-1]){
                        l++;
                    }
                    while(h>=0 && nums[h]==nums[h+1]) h--;
                }
                else if(nums[l]+nums[h]>target) h--;
                else l++;
            }
            
        }
        return ans;
    }
};

1 Approach 1

class Solution {
public:
    int findMin(vector<int>& nums) {
        int l=0, r = nums.size()-1;
        if(nums.size() == 1) return nums[0];
        int n = nums.size();
        while(l<=r){
            int mid = l+(r-l)/2;
            if(mid>0 && mid<n-1) if(nums[mid]<nums[mid-1] && nums[mid]<nums[mid+1]) return nums[mid];
            if(mid == 0) return min(nums[mid], nums[mid+1]);
            if(mid == n-1) return min(nums[mid], nums[mid-1]);
            if(nums[mid]<nums[r]) r = mid-1;
            else l = mid+1;
        }
        return 0;
    }
};


2. 

class Solution {
public:
    int findMin(vector<int>& nums) {
        int l=0, r = nums.size()-1;
        int ans = INT_MAX;
        while(l<=r){
            int mid = l+(r-l)/2;

            //left sroted
            if(nums[mid]>=nums[l]){
                ans = min(ans, nums[l]);
                l = mid+1;
            }
            else{
                ans = min(ans, nums[mid]);  //right sorted
                r = mid-1;
            }
        }
        return ans;
    }
};

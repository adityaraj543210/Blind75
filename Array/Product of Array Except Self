1. Approach 1
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);
        vector<int> preMul(n);
        vector<int> postMul(n);
        preMul[0] = nums[0];
        for (int i = 1; i < n; i++) {
            preMul[i] = preMul[i - 1] * nums[i];
        }
        postMul[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            postMul[i] = postMul[i + 1] * nums[i];
        }

        for(int i=0; i<n; i++){
            if(i==0) ans[0]=postMul[1];
            else if(i==n-1) ans[n-1]=preMul[n-2];
            else ans[i]=preMul[i-1]*postMul[i+1];
        }
        return ans;
    }
};


2. Approach 2
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n,1);

        //premultiplication
        for(int i=1; i<n; i++){
            if(i==1) ans[i] = nums[i-1];
            if(i>=2) ans[i] = nums[i-1]*ans[i-1];
        }

        //postmultiplication
        int postmulti = 1;
        for(int i=n-1; i>=0; i--){
            ans[i] = ans[i]*postmulti;
            postmulti *= nums[i];
        }

        return ans;
    }
};


